<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vienna R User Group </title>
    <link>http://www.viennar.org/tags/rstudy/index.xml</link>
    <language>en-us</language>
    <author>Vienna-R</author>
    <rights>(C) 2016</rights>
    <updated>0001-01-01 00:00:00 &#43;0000 UTC</updated>

    
      
        <item>
          <title>igraph Applications for Transportation Networks</title>
          <link>http://www.viennar.org/blog/2016/08/24/igraph-applications-for-transportation-networks/</link>
          <pubDate>Wed, 24 Aug 2016 22:20:00 &#43;0200</pubDate>
          <author>Vienna-R</author>
          <guid>http://www.viennar.org/blog/2016/08/24/igraph-applications-for-transportation-networks/</guid>
          <description>&lt;p&gt;Materials from Max Leodolters talk in May covering the &lt;strong&gt;igraph&lt;/strong&gt;
package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require(igraph)
require(data.table)
require(ggplot2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#centrality---what-is-it&#34;&gt;Centrality - What is it?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#igraph-for-centralities&#34;&gt;igraph for centralities&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#node-betweenness&#34;&gt;Node Betweenness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#local-vs.-global&#34;&gt;Local vs. Global&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#node-based-vs.-link-based-betweenness-for-links&#34;&gt;Node-based vs. link-based Betweenness for
Links&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bugsfeaturesspecial-experiences&#34;&gt;Bugs/Features/Special
experiences&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#what-for-did-we-use-centralities&#34;&gt;What for did we use
centralities?&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#global-betweenness&#34;&gt;Global Betweenness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#local-betweenness&#34;&gt;Local Betweenness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#global-closeness&#34;&gt;Global Closeness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#local-closeness&#34;&gt;Local Closeness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#real-world-difference-of-node-based-and-link-based-betweenness-for-a-link&#34;&gt;Real world difference of node-based and link-based Betweenness
for a
link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#improvement-travel-time-model&#34;&gt;Improvement travel time model&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;centrality-what-is-it&#34;&gt;Centrality - What is it?&lt;/h1&gt;

&lt;p&gt;Network Centrality gives you an idea of how important a vertex/node and
edge/link in your network/graph &lt;em&gt;N&lt;/em&gt;(&lt;em&gt;V&lt;/em&gt;, &lt;em&gt;E&lt;/em&gt;) respectively &lt;em&gt;G&lt;/em&gt;(&lt;em&gt;N&lt;/em&gt;, &lt;em&gt;L&lt;/em&gt;)
is. Examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Closeness&lt;/li&gt;
&lt;li&gt;Betweenness&lt;/li&gt;
&lt;li&gt;Eigenvalue&lt;/li&gt;
&lt;li&gt;degree&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some formulas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Closeness Centrality
$$ C^{node}(n) = \frac{1}{\sum_{m \in N \setminus \{n\}}d(n,m)} $$&lt;/li&gt;
&lt;li&gt;Betweenness centrality
$$ B^{node}(n) = \sum_{m\neq o \in N\backslash \{n\} } \frac{\sigma_{mo}(n)}{\sigma_{mo}} $$&lt;/li&gt;
&lt;li&gt;Node-based Closeness for a link
$$ \ddot{C}^{link}(l_{n,m}) = \frac{C^{node}(n) + C^{node}(m)}{2} $$&lt;/li&gt;
&lt;li&gt;Node-based Betweenness for a link
$$ \ddot{B}^{link}(l_{n,m}) = \frac{B^{node}(n) + B^{node}(m)}{2} $$&lt;/li&gt;
&lt;li&gt;Link-based Betweenness for a link
$$ B^{link}(l) = \sum_{n \neq m \in N } \frac{\sigma_{nm}(l)}{\sigma_{nm}} $$
 *&lt;em&gt;σ&lt;/em&gt; is the number of traversing OD relations, and &lt;em&gt;d&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt;, &lt;em&gt;m&lt;/em&gt;)
is the distance of the shortest route from &lt;em&gt;n&lt;/em&gt; to &lt;em&gt;m&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What to select, $\ddot{B}^{link}(l_{n,m})$ or $ B^{link}(l)$?&lt;/p&gt;

&lt;h1 id=&#34;igraph-for-centralities&#34;&gt;igraph for centralities&lt;/h1&gt;

&lt;h2 id=&#34;node-betweenness&#34;&gt;Node Betweenness&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;g &amp;lt;- make_star(5, mode = &amp;quot;undirected&amp;quot;, center=3)
V(g)$name &amp;lt;- letters[1:length(V(g))]
plot(g)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/20160524_igraph_applications_files/figure-markdown_strict/unnamed-chunk-2-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;g &amp;lt;- set.edge.attribute(g, &amp;quot;weight&amp;quot;,  value= 1)
b &amp;lt;- betweenness(g, directed=F)
V(g)$name &amp;lt;- b
plot(g)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/20160524_igraph_applications_files/figure-markdown_strict/unnamed-chunk-2-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Edge Betweenness:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;g &amp;lt;- make_star(5, mode = &amp;quot;undirected&amp;quot;, center=3)
V(g)$name &amp;lt;- letters[1:length(V(g))]
g &amp;lt;- set.edge.attribute(g, &amp;quot;weight&amp;quot;,  value= 1)

bg &amp;lt;- edge_betweenness(g, directed=F)
plot(g, edge.label = bg)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/20160524_igraph_applications_files/figure-markdown_strict/unnamed-chunk-3-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;local-vs-global&#34;&gt;Local vs. Global&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;g &amp;lt;- make_graph(c(1, 2, 2, 3,#horizontal connections
                  4,5,5,6,6,7,
                  1,6,#vertical connections
                  2,7), directed = FALSE)
#g &amp;lt;- make_star(10, mode = &amp;quot;undirected&amp;quot;, center=3)
V(g)$name &amp;lt;- letters[1:length(V(g))]
g &amp;lt;- set.edge.attribute(g, &amp;quot;weight&amp;quot;,  value= 1)
set.seed(2)
lay &amp;lt;- layout.auto(g)
bl &amp;lt;- estimate_edge_betweenness(g, cutoff = 1.5, directed=F);bl

## [1] 3 3 2 4 3 3 3

bg &amp;lt;- edge_betweenness(g, directed=F)


# set plotting parameters
vs &amp;lt;- 15# vertex.size
ec &amp;lt;- gray(0.8)#edge.color
elx &amp;lt;- 2# edge.label.cex
elc &amp;lt;- &amp;quot;black&amp;quot;#,edge.label.color
vlc &amp;lt;- 2#vertex.label.cex
ew &amp;lt;- 2#edge.width
hd &amp;lt;- paste(rep(&amp;quot; &amp;quot;,0), collapse=&amp;quot;&amp;quot;)
cm &amp;lt;- 3
vc &amp;lt;- &amp;quot;orange&amp;quot;#gray(0.8)#palette(&amp;quot;default&amp;quot;)#&amp;quot;grey&amp;quot;#vertex.color

#windows(width = 18, height=6)
#par(mfrow=c(1,3))

plot(g, edge.label=paste(hd, round(E(g)$weight,1)), layout=lay, vertex.size=vs, edge.color=ec, edge.label.cex=elx, vertex.label.cex=vlc, edge.width=ew, edge.label.color=elc, vertex.color=vc)
title(&amp;quot;(a) Weights&amp;quot;, cex.main = cm)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/20160524_igraph_applications_files/figure-markdown_strict/unnamed-chunk-4-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plot(g, edge.label=paste(hd, round(bl,1)),          layout=lay, vertex.size=vs, edge.color=ec, edge.label.cex=elx, vertex.label.cex=vlc, edge.width=ew, edge.label.color=elc, vertex.color=vc)
title(&amp;quot;(b) Local Betweenness&amp;quot;, cex.main = cm)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/20160524_igraph_applications_files/figure-markdown_strict/unnamed-chunk-4-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plot(g, edge.label=paste(hd, round(bg,1)),          layout=lay, vertex.size=vs, edge.color=ec, edge.label.cex=elx, vertex.label.cex=vlc, edge.width=ew, edge.label.color=elc, vertex.color=vc)
title(&amp;quot;(c) Global Betweenness&amp;quot;, cex.main = cm)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/20160524_igraph_applications_files/figure-markdown_strict/unnamed-chunk-4-3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;node-based-vs-link-based-betweenness-for-links&#34;&gt;Node-based vs. link-based Betweenness for Links&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;g &amp;lt;- make_graph(c(1,2, 2,3, 3,4, 4,5,#horizontal connections
                  6,7, 7,8, 8,9, 9,10,
                  2,7,#vertical connections
                  3,8,
                  4,9), directed = FALSE)

V(g)$name &amp;lt;- letters[1:length(V(g))]
set.seed(1210)
g &amp;lt;- set.edge.attribute(g, &amp;quot;weight&amp;quot;,  value= 1)
g &amp;lt;- set.edge.attribute(g, &amp;quot;weight&amp;quot;, index= c(10), value= 2)
#plot(g,edge.label=paste(hd, round(E(g)$weight,1)))
lay &amp;lt;- layout.auto(g)
eb &amp;lt;- edge_betweenness(g, directed=F)
vb &amp;lt;- betweenness(g, directed=F)

tmp1 &amp;lt;- as.data.table(as.data.frame(cbind(get.edgelist(g))))
tmp1[,id:=1:.N]
tmp2 &amp;lt;- as.data.table(data.frame(value=vb, name=names(vb)))
setnames(tmp1, &amp;quot;V1&amp;quot;, &amp;quot;name&amp;quot;)
tmp3 &amp;lt;- merge(tmp1, tmp2, by =&amp;quot;name&amp;quot;)
setnames(tmp3, &amp;quot;name&amp;quot;, &amp;quot;V1&amp;quot;)
setnames(tmp3, &amp;quot;V2&amp;quot;, &amp;quot;name&amp;quot;)
tmp4 &amp;lt;- merge(tmp3, tmp2, by =&amp;quot;name&amp;quot;)
setnames(tmp4,  &amp;quot;name&amp;quot;, &amp;quot;V2&amp;quot;)
tmp4[,m:=mean(c(value.x, value.y)) , by=c(&amp;quot;V2&amp;quot;,&amp;quot;V1&amp;quot;)]
evb &amp;lt;- tmp4[order(id),list(V1,V2,m)]$m


# set plotting parameters
vs &amp;lt;- 15# vertex.size
ec &amp;lt;- &amp;quot;grey&amp;quot;#edge.color
elx &amp;lt;- 2# edge.label.cex
elc &amp;lt;- &amp;quot;black&amp;quot;#edge.label.color
vlc &amp;lt;- 2#vertex.label.cex
ew &amp;lt;- 2#edge.width
hd &amp;lt;- paste(rep(&amp;quot; &amp;quot;,0), collapse=&amp;quot;&amp;quot;)
cm &amp;lt;- 3
vc &amp;lt;- &amp;quot;orange&amp;quot;# vertex.color

windows(width = 18, height=6)
#par(mfrow=c(1,3))

plot(g, edge.label=paste(hd, round(E(g)$weight,1)), layout=lay, vertex.size=vs, edge.color=ec, edge.label.cex=elx, vertex.label.cex=vlc, edge.width=ew, edge.label.color=elc, vertex.color=vc)
title(&amp;quot;(a) Weights&amp;quot;,cex.main=cm)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/20160524_igraph_applications_files/figure-markdown_strict/unnamed-chunk-5-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plot(g, edge.label=paste(hd, round(eb,1)),          layout=lay, vertex.size=vs, edge.color=ec, edge.label.cex=elx, vertex.label.cex=vlc, edge.width=ew, edge.label.color=elc, vertex.color=vc)
title(&amp;quot;(b) Link based Betweenness&amp;quot;,cex.main=cm)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/20160524_igraph_applications_files/figure-markdown_strict/unnamed-chunk-5-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;V(g)$name &amp;lt;- paste(vb)

plot(g, edge.label=paste(hd, round(evb,1)),          layout=lay, vertex.size=vs, edge.color=ec, edge.label.cex=elx, vertex.label.cex=vlc, edge.width=ew, edge.label.color=elc, vertex.color=vc)
title(&amp;quot;(c) Node based Betweenness&amp;quot; ,cex.main=cm)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/20160524_igraph_applications_files/figure-markdown_strict/unnamed-chunk-5-3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;bugs-features-special-experiences&#34;&gt;Bugs/Features/Special experiences&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;demonstrate the parameter &amp;lsquo;lay&amp;rsquo; with setting it NULL&lt;/li&gt;
&lt;li&gt;cutoff parameter&lt;/li&gt;
&lt;li&gt;nodes need to be named for using induced.subgraph(), otherwise
problems in matching results&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;cutoff&#34;&gt;cutoff&lt;/h3&gt;

&lt;p&gt;stackoverflow:
&lt;a href=&#34;http://stackoverflow.com/questions/34180036/how-does-the-cutoff-parameter-influence-betweenness-calculation&#34;&gt;http://stackoverflow.com/questions/34180036/how-does-the-cutoff-parameter-influence-betweenness-calculation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;discussion:
&lt;a href=&#34;https://lists.nongnu.org/archive/html/igraph-help/2012-11/msg00083.html&#34;&gt;https://lists.nongnu.org/archive/html/igraph-help/2012-11/msg00083.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;github project:
&lt;a href=&#34;https://github.com/maxar/igraph_testing/blob/master/test_vertex_betweenness_local.R&#34;&gt;https://github.com/maxar/igraph_testing/blob/master/test_vertex_betweenness_local.R&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require(igraph)
packageVersion(&amp;quot;igraph&amp;quot;) # my installed version is 1.0.1

## [1] &#39;1.0.1&#39;

#----------------------------------------------------------------------------------------
#---------------    EXAMPLE 1    --------------------------------------------------------
#----------------------------------------------------------------------------------------

#--- set plotting parameters
vs &amp;lt;- 25# vertex.size
ec &amp;lt;- gray(0.8)#edge.color
elx &amp;lt;- 2# edge.label.cex
elc &amp;lt;- &amp;quot;black&amp;quot;#,edge.label.color
vlc &amp;lt;- 2#vertex.label.cex
ew &amp;lt;- 2#edge.width
cm &amp;lt;- 2
vc &amp;lt;- &amp;quot;orange&amp;quot;


g &amp;lt;- make_graph(c(1, 2, 2, 3, 3, 4, 4,5, 5, 6, 6, 7) , directed = FALSE)

set.seed(1210)
lay &amp;lt;- layout.auto(g)

graphics.off()
windows(width = 30, height=10)
#par(mfrow=c(1,3))

V(g)$name &amp;lt;- letters[1:length(V(g))]
g &amp;lt;- set.edge.attribute(g, &amp;quot;weight&amp;quot;,  value= c(2,3,5,5,3,2))
plot(g, edge.label=round(E(g)$weight,1), layout=lay, vertex.size=vs, edge.color=ec, edge.label.cex=elx, vertex.label.cex=vlc, edge.width=ew, edge.label.color=elc, vertex.color=vc)
title(&amp;quot;(a) Weights&amp;quot;, cex.main = cm)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/20160524_igraph_applications_files/figure-markdown_strict/unnamed-chunk-6-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bl.1 &amp;lt;- estimate_betweenness(g, cutoff=10)
V(g)$name &amp;lt;- bl.1
plot(g,        layout=lay, vertex.size=vs, edge.color=ec, edge.label.cex=elx, vertex.label.cex=vlc, edge.width=ew, edge.label.color=elc, vertex.color=vc)
title(&amp;quot;(b) Local Betweenness\ncutoff 10&amp;quot;, cex.main = cm)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/20160524_igraph_applications_files/figure-markdown_strict/unnamed-chunk-6-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bl.2 &amp;lt;- estimate_betweenness(g, cutoff=Inf)
V(g)$name &amp;lt;- bl.2
plot(g,        layout=lay, vertex.size=vs, edge.color=ec, edge.label.cex=elx, vertex.label.cex=vlc, edge.width=ew, edge.label.color=elc, vertex.color=vc)
title(&amp;quot;(b) Global Betweenness\ncutoff Inf&amp;quot;, cex.main = cm)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/20160524_igraph_applications_files/figure-markdown_strict/unnamed-chunk-6-3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Comments and Discussion:
# This simple example illustrates, why it is questionable
# that the cutoff parameter actually measures distance independent of the edge weights
#
# 1. define edge weights as in plot (a)
# 2. calculate vertex betweenness with cutoff 10 (b)
# 3. calculate vertex betweenness with cutoff Inf (c)






#----------------------------------------------------------------------------------------
#---------------    EXAMPLE 2    --------------------------------------------------------
#----------------------------------------------------------------------------------------

#--- set plotting parameters
vs &amp;lt;- 25# vertex.size
ec &amp;lt;- gray(0.8)#edge.color
elx &amp;lt;- 2# edge.label.cex
elc &amp;lt;- &amp;quot;black&amp;quot;#,edge.label.color
vlc &amp;lt;- 2#vertex.label.cex
ew &amp;lt;- 2#edge.width
cm &amp;lt;- 2
vc &amp;lt;- &amp;quot;orange&amp;quot;


set.seed(1210)
g &amp;lt;- make_ring(8)
lay &amp;lt;- layout.auto(g)

graphics.off()
windows(width = 12, height=12)
par(mfrow=c(2,2))

V(g)$name &amp;lt;- letters[1:length(V(g))]
g &amp;lt;- set.edge.attribute(g, &amp;quot;weight&amp;quot;, value= c(.1 , .2, rep(.1, 2), rep(0.2,4)))
plot(g, edge.label=round(E(g)$weight,1), layout=lay, vertex.size=vs, edge.color=ec, edge.label.cex=elx, vertex.label.cex=vlc, edge.width=ew, edge.label.color=elc, vertex.color=vc)
title(&amp;quot;(a) Weights&amp;quot;, cex.main = cm)

bl.1 &amp;lt;- estimate_betweenness(g, cutoff=0.29)
V(g)$name &amp;lt;- bl.1
plot(g,        layout=lay, vertex.size=vs, edge.color=ec, edge.label.cex=elx, vertex.label.cex=vlc, edge.width=ew, edge.label.color=elc, vertex.color=vc)
title(&amp;quot;(b) Local Betweenness\ncutoff 0.29&amp;quot;, cex.main = cm)

V(g)$name &amp;lt;- letters[1:length(V(g))]
g &amp;lt;- set.edge.attribute(g, &amp;quot;weight&amp;quot;, value=.2)
plot(g, edge.label=round(E(g)$weight,1), layout=lay, vertex.size=vs, edge.color=ec, edge.label.cex=elx, vertex.label.cex=vlc, edge.width=ew, edge.label.color=elc, vertex.color=vc)
title(&amp;quot;(c) new weights&amp;quot;, cex.main = cm)

bl.2 &amp;lt;- estimate_betweenness(g, cutoff=0.29)
V(g)$name &amp;lt;- bl.2
plot(g,          layout=lay, vertex.size=vs, edge.color=ec, edge.label.cex=elx, vertex.label.cex=vlc, edge.width=ew, edge.label.color=elc, vertex.color=vc)
title(&amp;quot;(d) Local Betweenness\ncutoff 0.29&amp;quot;, cex.main = cm)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/20160524_igraph_applications_files/figure-markdown_strict/unnamed-chunk-6-4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Comments and Discussion:
# This simple example illustrates, that vertex betweenness values change,
# if the edge weights are changed and the cutoff parameters are chosen constant.
# Ring shape to reconstruct the calculation easier;
#
# 1. define edge weights as in plot (a)
# 2. calculate vertex betweenness with cutoff 0.29 (b)
# 3. define new edge weights as in plot (c)
# 4. calculate vertex betweenness with cutoff 0.29 (d)





#----------------------------------------------------------------------------------------
#---------------    EXAMPLE 3    --------------------------------------------------------
#----------------------------------------------------------------------------------------

#--- set plotting parameters
vs &amp;lt;- 20# vertex.size
ec &amp;lt;- gray(0.8)#edge.color
elx &amp;lt;- 1# edge.label.cex
elc &amp;lt;- &amp;quot;black&amp;quot;#,edge.label.color
vlc &amp;lt;- 1#vertex.label.cex
ew &amp;lt;- 2#edge.width
cm &amp;lt;- 2
vc &amp;lt;- &amp;quot;orange&amp;quot;


set.seed(1210)
g &amp;lt;- make_ring(20)
lay &amp;lt;- layout.auto(g)

graphics.off()
#windows(width = 30, height=30)
#par(mfrow=c(2,2))

V(g)$name &amp;lt;- letters[1:length(V(g))]
g &amp;lt;- set.edge.attribute(g, &amp;quot;weight&amp;quot;, value= c(rep(2:3,10)))
plot(g, edge.label=round(E(g)$weight,1), layout=lay, vertex.size=vs, edge.color=ec, edge.label.cex=elx, vertex.label.cex=vlc, edge.width=ew, edge.label.color=elc, vertex.color=vc)
title(&amp;quot;(a) Weights&amp;quot;, cex.main = cm)

bl.1 &amp;lt;- estimate_betweenness(g, cutoff=6)
V(g)$name &amp;lt;- bl.1
plot(g,        layout=lay, vertex.size=vs, edge.color=ec, edge.label.cex=elx, vertex.label.cex=vlc, edge.width=ew, edge.label.color=elc, vertex.color=vc)
title(&amp;quot;(b) Local Betweenness\ncutoff 6&amp;quot;, cex.main = cm)

bl.2 &amp;lt;- estimate_betweenness(g, cutoff=9)
V(g)$name &amp;lt;- bl.2
plot(g,        layout=lay, vertex.size=vs, edge.color=ec, edge.label.cex=elx, vertex.label.cex=vlc, edge.width=ew, edge.label.color=elc, vertex.color=vc)
title(&amp;quot;(c) Local Betweenness\ncutoff 9&amp;quot;, cex.main = cm)

bl.3 &amp;lt;- estimate_betweenness(g, cutoff=Inf)
V(g)$name &amp;lt;- bl.3
plot(g,          layout=lay, vertex.size=vs, edge.color=ec, edge.label.cex=elx, vertex.label.cex=vlc, edge.width=ew, edge.label.color=elc, vertex.color=vc)
title(&amp;quot;(d) Global Betweenness\ncutoff Inf&amp;quot;, cex.main = cm)


# Comments and Discussion:
# This simple example illustrates, that vertex betweenness values change,
# if the edge weights are constant and the cutoff parameters change.
# Ring shape to reconstruct the calculation easier;
#
# 1. define edge weights as in plot (a)
# 2. calculate vertex betweenness with cutoff 6 (b)
# 3. calculate vertex betweenness with cutoff 9 (c)
# 4. calculate vertex betweenness with cutoff Inf (d)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;normalization&#34;&gt;normalization&lt;/h3&gt;

&lt;p&gt;stackoverflow:
&lt;a href=&#34;http://stackoverflow.com/questions/34000326/normalized-local-closeness-centrality-in-r-igraphestimate-closeness&#34;&gt;http://stackoverflow.com/questions/34000326/normalized-local-closeness-centrality-in-r-igraphestimate-closeness&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am trying to calculate a normalized local closeness centrality. But
setting the parameter &amp;lsquo;normalized = T&amp;rsquo; for igraph::estimate_closeness()
only multiplies the results with (N-1). Is it possible to define N_i
for vertex i individually by it&amp;rsquo;s neighborhood, that is determined by
the cut-off parameter (and of course by the graph itself)?&lt;/p&gt;

&lt;p&gt;The mini example demonstrates, that setting the parameter &amp;lsquo;normalized=T&amp;rsquo;
does not work for this purpose. It normalizes with one and the same
(N-1) for all vertices.&lt;/p&gt;

&lt;p&gt;Thanks for help.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set.seed(1210)
require(&#39;igraph&#39;)
g &amp;lt;- random.graph.game(20,3/10)
g &amp;lt;- set.edge.attribute(g, &amp;quot;weight&amp;quot;,  value= 1)
cnt &amp;lt;- estimate_closeness(g, cutoff = 3, normalized = T );cnt

##  [1] 0.6333333 0.2467532 0.3220339 0.5000000 0.5277778 0.5588235 0.6129032
##  [8] 0.5135135 0.5428571 0.5588235 0.4634146 0.5277778 0.6129032 0.5000000
## [15] 0.6333333 0.5000000 0.3392857 0.5135135 0.5135135 0.5135135

cnf &amp;lt;- estimate_closeness(g, cutoff = 3, normalized = F );cnf

##  [1] 0.03333333 0.01298701 0.01694915 0.02631579 0.02777778 0.02941176
##  [7] 0.03225806 0.02702703 0.02857143 0.02941176 0.02439024 0.02777778
## [13] 0.03225806 0.02631579 0.03333333 0.02631579 0.01785714 0.02702703
## [19] 0.02702703 0.02702703

#print results
cbind(cnf * (length(V(g))-1), cnt)

##                       cnt
##  [1,] 0.6333333 0.6333333
##  [2,] 0.2467532 0.2467532
##  [3,] 0.3220339 0.3220339
##  [4,] 0.5000000 0.5000000
##  [5,] 0.5277778 0.5277778
##  [6,] 0.5588235 0.5588235
##  [7,] 0.6129032 0.6129032
##  [8,] 0.5135135 0.5135135
##  [9,] 0.5428571 0.5428571
## [10,] 0.5588235 0.5588235
## [11,] 0.4634146 0.4634146
## [12,] 0.5277778 0.5277778
## [13,] 0.6129032 0.6129032
## [14,] 0.5000000 0.5000000
## [15,] 0.6333333 0.6333333
## [16,] 0.5000000 0.5000000
## [17,] 0.3392857 0.3392857
## [18,] 0.5135135 0.5135135
## [19,] 0.5135135 0.5135135
## [20,] 0.5135135 0.5135135

sum(abs(cnf * (length(V(g))-1) - cnt))

## [1] 8.326673e-17

#for visualization
V(g)$name &amp;lt;- paste(&amp;quot;v&amp;quot;, 1:length(V(g)), sep=&amp;quot;&amp;quot;)#letters[1:length(V(g))]
set.seed(2)
lay &amp;lt;- layout.auto(g)

## set plotting parameters
vs &amp;lt;- 15# vertex.size
ec &amp;lt;- gray(0.8)#edge.color
elx &amp;lt;- 2# edge.label.cex
elc &amp;lt;- &amp;quot;black&amp;quot;#,edge.label.color
vlc &amp;lt;- 2#vertex.label.cex
ew &amp;lt;- 2#edge.width
hd &amp;lt;- paste(rep(&amp;quot; &amp;quot;,0), collapse=&amp;quot;&amp;quot;)
cm &amp;lt;- 3
vc &amp;lt;- &amp;quot;orange&amp;quot;#gray(0.8)#palette(&amp;quot;default&amp;quot;)#&amp;quot;grey&amp;quot;#vertex.color

windows(width = 18, height=6)
#par(mfrow=c(1,3))

plot(g, edge.label=paste(hd, round(E(g)$weight,1)), layout=lay, vertex.size=vs, edge.color=ec, edge.label.cex=elx, vertex.label.cex=vlc, edge.width=ew, edge.label.color=elc, vertex.color=vc)
title(&amp;quot;(a) Weights&amp;quot;, cex.main = cm)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/20160524_igraph_applications_files/figure-markdown_strict/unnamed-chunk-7-1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;V(g)$name &amp;lt;- paste(round(cnt,3))
plot(g,          layout=lay, vertex.size=vs, edge.color=ec, edge.label.cex=elx, vertex.label.cex=vlc, edge.width=ew, edge.label.color=elc, vertex.color=vc)
title(&amp;quot;(b) local closeness normalized&amp;quot;, cex.main = cm)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/20160524_igraph_applications_files/figure-markdown_strict/unnamed-chunk-7-2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;V(g)$name &amp;lt;- paste(round(cnf,3))
plot(g,          layout=lay, vertex.size=vs, edge.color=ec, edge.label.cex=elx, vertex.label.cex=vlc, edge.width=ew, edge.label.color=elc, vertex.color=vc)
title(&amp;quot;(c) local closeness&amp;quot;, cex.main = cm)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/20160524_igraph_applications_files/figure-markdown_strict/unnamed-chunk-7-3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;my-solution&#34;&gt;My solution&lt;/h4&gt;

&lt;p&gt;easy workaround for local centralities: define neighborhood for each
node, calcualte &amp;lsquo;global&amp;rsquo; centralities for these neighborhoods and
normalize it individually.&lt;/p&gt;

&lt;h1 id=&#34;what-for-did-we-use-centralities&#34;&gt;What for did we use centralities?&lt;/h1&gt;

&lt;p&gt;Thanks to Anita Graser for the beautiful plots!&lt;/p&gt;

&lt;p&gt;$$\hat{y}_{t,\gamma}(s,b,c) = \beta_t  + \beta_{\gamma,s} \cdot s  + \beta_{\gamma,b} \cdot b + \beta_{\gamma,c} \cdot c + \beta_{\gamma,bc} \cdot b \cdot c$$&lt;/p&gt;

&lt;p&gt;some plots:&lt;/p&gt;

&lt;h2 id=&#34;global-betweenness&#34;&gt;Global Betweenness&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/20160524_igraph_applications_files/figure-markdown_strict/pic1.png&#34; title=&#34;**Global Betweenness** \
*Global Betweenness*&#34; alt=&#34;**Global Betweenness** \
*Global Betweenness*&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;local-betweenness&#34;&gt;Local Betweenness&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/20160524_igraph_applications_files/figure-markdown_strict/pic2.png&#34; title=&#34;**Local Betweenness** \
*Local Betweenness*&#34; alt=&#34;**Local Betweenness** \
*Local Betweenness*&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;global-closeness&#34;&gt;Global Closeness&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/20160524_igraph_applications_files/figure-markdown_strict/pic3.png&#34; title=&#34;**Global Closeness** \
*Global Closeness*&#34; alt=&#34;**Global Closeness** \
*Global Closeness*&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;local-closeness&#34;&gt;Local Closeness&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/20160524_igraph_applications_files/figure-markdown_strict/pic4.png&#34; title=&#34;**Local Closeness** \
*Local Closeness*&#34; alt=&#34;**Local Closeness** \
*Local Closeness*&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;real-world-difference-of-node-based-and-link-based-betweenness-for-a-link&#34;&gt;Real world difference of node-based and link-based Betweenness for a link&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/20160524_igraph_applications_files/figure-markdown_strict/pic5.png&#34; title=&#34;**Real world difference 1** \
*Real world difference 1*&#34; alt=&#34;**Real world difference 1** \
*Real world difference 1*&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/20160524_igraph_applications_files/figure-markdown_strict/pic6.png&#34; title=&#34;**Real world difference 2** \
*Real world difference 2*&#34; alt=&#34;**Real world difference 2** \
*Real world difference 2*&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;improvement-travel-time-model&#34;&gt;Improvement travel time model&lt;/h2&gt;

&lt;h3 id=&#34;mape-difference-global-minus-local&#34;&gt;MAPE Difference Global minus local&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/20160524_igraph_applications_files/figure-markdown_strict/pic7.png&#34; title=&#34;**MAPE Difference** \
*MAPE Difference*&#34; alt=&#34;**MAPE Difference** \
*MAPE Difference*&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;detail-mape-base&#34;&gt;Detail MAPE base&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/20160524_igraph_applications_files/figure-markdown_strict/pic8.png&#34; title=&#34;**MAPE base** \
*MAPE base*&#34; alt=&#34;**MAPE base** \
*MAPE base*&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;detail-mape-with-local-centralities&#34;&gt;Detail MAPE with local centralities&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/20160524_igraph_applications_files/figure-markdown_strict/pic9.png&#34; title=&#34;**MAPE local** \
*MAPE local*&#34; alt=&#34;**MAPE local** \ *MAPE local*&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; /&gt;&lt;/p&gt;</description>
        </item>
      
    
      
        <item>
          <title>Wordcloud Wienerwald</title>
          <link>http://www.viennar.org/blog/2016/02/24/wordcloud-wienerwald/</link>
          <pubDate>Wed, 24 Feb 2016 22:20:00 &#43;0200</pubDate>
          <author>Vienna-R</author>
          <guid>http://www.viennar.org/blog/2016/02/24/wordcloud-wienerwald/</guid>
          <description>&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/wordcloudwienerwald.png&#34; title=&#34;**Wordcloud** \
*Ödön von Horvath - Geschichten aus dem Wienerwald*&#34; alt=&#34;**Wordcloud** \
*Ödön von Horvath - Geschichten aus dem Wienerwald*&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After a very nice hands-on introduction in yesterday&amp;rsquo;s Vienna R meetup meeting from Mario Annau, I created an example of textmining ending with a wordcloud. As the blog is called ViennaR, I chose to use a play strongly related to Vienna - Ödön von Horváth - Geschichten aus dem Wienerwald.
&lt;/p&gt;

&lt;p&gt;The code documentation is in German, but with a little R-experience it should be easily understood.
In a first step all the required libraries are loaded.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(knitr) # Erzeugen eines HTML-Dokument
library(rvest) # Einlesen von HTML-Dokumenten
library(tm) # Erzeugen und Manipulieren von Textcorpora 
library(stringi) # Umwandeln von schlecht kodierten Sonderzeichen 
library(SnowballC) # Wortstammoperationen 
library(wordcloud) # Erzeugen der Wordcloud
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As of next, the textparts are loaded from the project Gutenberg homepage. As the play was divided this had to be repeated four times. A function was defined for the import from each url with the appropriate CSS-node and ideal encoding. However, the forced transformation to UTF-8 did not do anything actually.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Ödön von Horváth - Geschichten aus dem Wienerwald 
url1 &amp;lt;- &amp;quot;http://gutenberg.spiegel.de/buch/geschichten-aus-dem-wiener-wald-volksstuck-in-drei-teilen-2900/1&amp;quot;
url2 &amp;lt;- &amp;quot;http://gutenberg.spiegel.de/buch/geschichten-aus-dem-wiener-wald-volksstuck-in-drei-teilen-2900/2&amp;quot;
url3 &amp;lt;- &amp;quot;http://gutenberg.spiegel.de/buch/geschichten-aus-dem-wiener-wald-volksstuck-in-drei-teilen-2900/3&amp;quot;
url4 &amp;lt;- &amp;quot;http://gutenberg.spiegel.de/buch/geschichten-aus-dem-wiener-wald-volksstuck-in-drei-teilen-2900/4&amp;quot;

# Einlesefunktion des Textes; Kodierung zu UTF-8
  gut_les &amp;lt;-   function(x){
    step1 &amp;lt;- read_html(x, encoding = &amp;quot;ISO-8859-1&amp;quot;)
    step2 &amp;lt;- html_nodes(step1,&amp;quot;#gutenb&amp;quot;)
    step3 &amp;lt;- iconv(html_text(step2),from = &amp;quot;ISO-8859-1&amp;quot;, to = &amp;quot;UTF-8&amp;quot;)
    return(step3)}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next the four text parts were integrated into one Corpus, a data type used in the tm package. In this case, the corpus was created from four char-vectors. Afterwards steps to clean up the text were performed. As in the presentation from Mario discussed, the order of these operations should be considered thoroughly.
First, I adapted the wrongly encoded signs with the function stri_replace_all_fixed(). German Umlaute are a real pain, I really can say that, as I have one in my surname. Then the names of the figures had to be removed, otherwise they would have overwhelmed the output.&lt;/p&gt;

&lt;p&gt;Typical steps for allowing for meaningful text operation are alse the removal of Whitespace, unifying to lower cases, removing punctuations, stopwords (&amp;rdquo;&lt;em&gt;meaningless&lt;/em&gt;&amp;rdquo; words as conjunctions) and word endings. All four texts are still in the corpus, which can be adressed like list items. They were though recoded as PlainTextDocument, which was a necessary step for being used in the wordcloud() function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Verbinden der 4 Texte zu einem Corpus 
GWW_corp &amp;lt;- Corpus(VectorSource(c(gut_les(url1),gut_les(url2),gut_les(url3),gut_les(url4))))

# Kodierungsfehler 
sz_fehler &amp;lt;- c(&amp;quot;Ã¼&amp;quot;,&amp;quot;Ã¶&amp;quot;,&amp;quot;Ã¤&amp;quot;,&amp;quot;Ã\u009f&amp;quot;,&amp;quot;â\u0080\u0093&amp;quot;,&amp;quot;Â&amp;quot;)
sz_korrekt &amp;lt;- c(&amp;quot;ü&amp;quot;,&amp;quot;ö&amp;quot;,&amp;quot;ä&amp;quot;,&amp;quot;ß&amp;quot;,&amp;quot;–&amp;quot;,&amp;quot;&amp;quot;)

# Ersetzen der Kodierungsfehler; deshalb das Stringi Package 
gwwc0 &amp;lt;- tm_map(GWW_corp, function(x) stri_replace_all_fixed(x, sz_fehler, sz_korrekt, vectorize_all = FALSE))

# Die Personen werden bei einem Theaterstrück sinnvollerweise entfernt. 
gwwc1 &amp;lt;- tm_map(gwwc0, removeWords, 
        c(&amp;quot;Alfred&amp;quot;,&amp;quot;Die Mutter&amp;quot;,&amp;quot;Die Großmutter&amp;quot;,&amp;quot;Der Hierlinger Ferdinand&amp;quot;,
          &amp;quot;Valerie&amp;quot;,&amp;quot;Oskar&amp;quot;,&amp;quot;Ida&amp;quot;,&amp;quot;Havlitschek&amp;quot;,&amp;quot;Rittmeister&amp;quot;,&amp;quot;Eine gnädige Frau&amp;quot;,
          &amp;quot;Marianne&amp;quot;,&amp;quot;Zauberkönig&amp;quot;,&amp;quot;Zwei Tanten&amp;quot;,&amp;quot;Erich&amp;quot;,&amp;quot;Emma&amp;quot;,&amp;quot;Helene&amp;quot;,
          &amp;quot;Der Dienstbot&amp;quot;,&amp;quot;Baronin&amp;quot;,&amp;quot;Beichtvater&amp;quot;, &amp;quot;Der Mister&amp;quot;,&amp;quot;Der Conferencier&amp;quot;))
gwwc2 &amp;lt;- tm_map(gwwc1, stripWhitespace) # Entfernen von Leerzeichen
gwwc3 &amp;lt;- tm_map(gwwc2, tolower) # Kleinschrift
gwwc4 &amp;lt;- tm_map(gwwc3, PlainTextDocument) # Umcodierung der Char-Vektoren zu Textdokumenten (für Wordlcloud)
gwwc5 &amp;lt;- tm_map(gwwc4, removeWords, stopwords(&amp;quot;german&amp;quot;)) # Entfernen von Füllwörtern
gwwc6 &amp;lt;- tm_map(gwwc5, removePunctuation) # Entfernen von Sonderzeichen 
gwwc7 &amp;lt;- tm_map(gwwc6, stemDocument) # Entfernen der Endungen 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After all this cleanup the wordcloud can be drawn. I used a variety of twelve rather light colors with a black background. It is not possible to access the background color inside the wordcloud function, but with the par-options.&lt;/p&gt;

&lt;p&gt;Et voilà - l&amp;rsquo;illustration!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;farbs &amp;lt;- brewer.pal(12,&amp;quot;Set3&amp;quot;) # Farbpalette für die Wordcloud

par(mar=c(0,0,0,0),bg=&amp;quot;black&amp;quot;) # Ausfüllen des Plotfensters, Hintergrund schwarz
# Die eigentliche Wordcloud
wordcloud(gwwc6, max.words=180, 
          random.order=FALSE,random.color=FALSE, # Farben und Reihenfolge nach Anzahl der Wörter geordnet 
          rot.per=0.35, # 35 % der Wörter sind senkrecht  
          colors=(farbs))
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
      
    
      
        <item>
          <title>Bike Parking Lots in Vienna</title>
          <link>http://www.viennar.org/blog/2015/11/08/bike-parking-lots-in-vienna/</link>
          <pubDate>Sun, 08 Nov 2015 22:20:00 &#43;0200</pubDate>
          <author>Vienna-R</author>
          <guid>http://www.viennar.org/blog/2015/11/08/bike-parking-lots-in-vienna/</guid>
          <description>&lt;p&gt;Another addition to the  &lt;a href=&#34;https://github.com/ViennaR/OpenGovernmentVienna&#34;&gt;OpenGovernmentVienna&lt;/a&gt; repo by Christian Brandstaetter showing the density of bike parking lots in Vienna.&lt;/p&gt;

&lt;p&gt;The script executes the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download Vienna map including district boundaries and bike parking lots from &lt;a href=&#34;http://data.wien.gv.at&#34;&gt;http://data.wien.gv.at&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Plot two Vienna maps showing bike parking lots and density per district.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(rgdal) 
library(rgeos) 
library(XML)
library(RCurl)
library(ggplot2) 
library(plotrix) 
library(maptools)

download.vienna.shape &amp;lt;- function(shapename, outdir = &amp;quot;data&amp;quot;) {
	baseurl &amp;lt;- &amp;quot;http://data.wien.gv.at/daten/geo?service=WFS&amp;amp;request=GetFeature&amp;amp;version=1.1.0&amp;amp;typeName=ogdwien:&amp;quot;
	urlparam &amp;lt;- &amp;quot;&amp;amp;srsName=EPSG:4326&amp;amp;outputFormat=shape-zip&amp;quot;	
	url &amp;lt;- sprintf(&amp;quot;%s%s%s&amp;quot;, baseurl, shapename, urlparam)
	
	dir.create(outdir, showWarnings = FALSE)
	destfile = file.path(outdir, sprintf(&amp;quot;%s.zip&amp;quot;, shapename))
	download.file(url, destfile = destfile)
	unzip(destfile, exdir = file.path(outdir, shapename))
	invisible(file.remove(destfile))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;retrieve-data&#34;&gt;Retrieve Data&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Read District Boundaries
download.vienna.shape(&amp;quot;BEZIRKSGRENZEOGD&amp;quot;)
wmap &amp;lt;- readOGR(&amp;quot;data/BEZIRKSGRENZEOGD&amp;quot;, layer=&amp;quot;BEZIRKSGRENZEOGDPolygon&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## OGR data source with driver: ESRI Shapefile 
## Source: &amp;quot;data/BEZIRKSGRENZEOGD&amp;quot;, layer: &amp;quot;BEZIRKSGRENZEOGDPolygon&amp;quot;
## with 23 features
## It has 15 fields
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Read Streets
download.vienna.shape(&amp;quot;STRASSENGRAPHOGD&amp;quot;)
smap &amp;lt;- readOGR(&amp;quot;data/STRASSENGRAPHOGD&amp;quot;, layer=&amp;quot;STRASSENGRAPHOGD&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## OGR data source with driver: ESRI Shapefile 
## Source: &amp;quot;data/STRASSENGRAPHOGD&amp;quot;, layer: &amp;quot;STRASSENGRAPHOGD&amp;quot;
## with 28293 features
## It has 18 fields
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Read bike parking lots
download.vienna.shape(&amp;quot;FAHRRADABSTELLANLAGEOGD&amp;quot;)
bmap &amp;lt;- readOGR(&amp;quot;data/FAHRRADABSTELLANLAGEOGD&amp;quot;, layer=&amp;quot;FAHRRADABSTELLANLAGEOGDPoint&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## OGR data source with driver: ESRI Shapefile 
## Source: &amp;quot;data/FAHRRADABSTELLANLAGEOGD&amp;quot;, layer: &amp;quot;FAHRRADABSTELLANLAGEOGDPoint&amp;quot;
## with 4061 features
## It has 5 fields
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Download Size of Each district
distsize &amp;lt;- download.vienna.bydistrict(&amp;quot;lebensraum/tabellen/nutzungsklassen-bez&amp;quot;, skip.row = 2)
distsizekm2 &amp;lt;- distsize[, 1] / 100
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;calculate-stuff&#34;&gt;Calculate stuff&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Number of bike parking lots per district
bikelotsperdistrict &amp;lt;- table(bmap$BEZIRK)
lotdensity &amp;lt;- bikelotsperdistrict / distsizekm2

## Normalization of Colour Scaling
normdichte &amp;lt;- round(lotdensity/max(lotdensity)*50,digits=0) 
colfunc &amp;lt;- colorRampPalette(c(&amp;quot;lightblue&amp;quot;, &amp;quot;darkgreen&amp;quot;)) 
colfunc100 &amp;lt;- colfunc(100) 
bezirksfarben &amp;lt;- colfunc100[normdichte]

# Transformations  111.1 
# km to degree (einfache Umrechnung) 
hundm &amp;lt;- (1/111.1)/10 
# 100 m for Radius of Punkte  
centroids &amp;lt;- gCentroid(wmap, byid=TRUE) # Mittelpunkt/Bezirk
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;plots&#34;&gt;Plots&lt;/h1&gt;

&lt;h2 id=&#34;plot-1-vienna-map-with-bike-parking-lots-discrete-density&#34;&gt;Plot 1 - Vienna Map with Bike Parking Lots (Discrete Density)&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;layout(1:2, heights=c(5,1)) 
par(mar=c(0.5,0.5,1,0.5), oma=rep(3, 4), las=1) 
plot(wmap, main=&amp;quot;Bike Parking Lots in Vienna&amp;quot;, col=bezirksfarben[wmap$BEZNR]) 

# add bike parking lots
plot(smap, add=TRUE, col = &amp;quot;grey&amp;quot;)
draw.circle(coordinates(bmap)[,1], coordinates(bmap)[,2],hundm,border=rgb(255,255,0,maxColorValue=255),col=rgb(255,255,0,maxColorValue=255))
text(as.character(wmap$BEZ_RZ), x = centroids@coords[,1], y = centroids@coords[,2], col=&amp;quot;orangered&amp;quot;,cex=0.8,font=2)

# Legend
par(mar=c(1,0.5,3,0.5)) 
colseq &amp;lt;- seq(range(lotdensity)[1],range(lotdensity)[2],20) 
image(x=colseq,y=1,z=matrix(seq_along(colseq)), col=colfunc(10), main=expression(paste(&amp;quot;Bike parking lot density per district km&amp;quot;^-2)),axes=F) 
axis(1)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/bikedensity-plot1-1.png&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;h1 id=&#34;plot-2-vienna-map-with-bike-parking-lots-continous-density&#34;&gt;Plot 2 - Vienna Map with Bike Parking Lots (Continous Density)&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Transformation of bike parking lots shape to data.frame for ggplot2
RK &amp;lt;- data.frame(coordinates(bmap)) 
colnames(RK) &amp;lt;- c(&amp;quot;long&amp;quot;,&amp;quot;lat&amp;quot;) 
ws2 &amp;lt;- fortify(smap,region=&amp;quot;OBJECTID&amp;quot;)  
wmap2 &amp;lt;- wmap 
# assign ID
wmap2@data$id &amp;lt;- rownames(wmap2@data) 
# transform to data.frame  
test1 &amp;lt;- fortify(wmap2, region=&amp;quot;id&amp;quot;)   
# This may take a while...
ggplot(data=test1) + 
  aes(x=long,y=lat) + 
  geom_polygon(aes(group=group),col=&amp;quot;black&amp;quot;,fill=NA) + 
  geom_point(data=RK,aes(x=long,y=lat)) + 
  geom_line(data=ws2,aes(group=group))+ xlab(&amp;quot;longitude&amp;quot;)+ylab(&amp;quot;latitude&amp;quot;) + 
  stat_density2d(data=RK,aes(fill = ..level..),size=1,bins=200,alpha=0.1, geom=&amp;quot;polygon&amp;quot;,n=100) +  
  ggtitle(&amp;quot;Bike Parking Lots in Vienna 2015&amp;quot;)+ scale_fill_continuous(name = &amp;quot;Kernel Density&amp;quot;) + 
  theme_bw() 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/bikedensity-plot2-1.png&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;p&gt;Comments/Pull Requests welcome!&lt;/p&gt;

&lt;p&gt;Authors: Christian Brandstaetter with minor modifications by Mario Annau&lt;/p&gt;</description>
        </item>
      
    
      
        <item>
          <title>Population Densities in Vienna</title>
          <link>http://www.viennar.org/blog/2015/10/30/population-densities-in-vienna/</link>
          <pubDate>Fri, 30 Oct 2015 22:20:00 &#43;0200</pubDate>
          <author>Vienna-R</author>
          <guid>http://www.viennar.org/blog/2015/10/30/population-densities-in-vienna/</guid>
          <description>&lt;p&gt;The new Github repository &lt;a href=&#34;https://github.com/ViennaR/OpenGovernmentVienna&#34;&gt;OpenGovernmentVienna&lt;/a&gt; has already been created including a very nice addition by Christian.&lt;/p&gt;

&lt;p&gt;The script executes the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download Vienna map including district boundaries from &lt;a href=&#34;http://data.wien.gv.at&#34;&gt;http://data.wien.gv.at&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Download population and district size from &lt;a href=&#34;https://www.wien.gv.at/statistik&#34;&gt;https://www.wien.gv.at/statistik&lt;/a&gt;, calculate population density.&lt;/li&gt;
&lt;li&gt;Plot Vienna map coloured by population density.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(rgdal) 
library(rgeos) 
library(XML)
library(RCurl)

download.vienna.bydistrict &amp;lt;- function(tablename, skip.row = 3) {
	baseurl &amp;lt;- &amp;quot;https://www.wien.gv.at/statistik&amp;quot;
	popurl &amp;lt;- sprintf(&amp;quot;%s/%s.html&amp;quot;, baseurl, tablename)

	poptable &amp;lt;- readHTMLTable(getURL(popurl))[[1]]
	poptable &amp;lt;- poptable[-c(1:skip.row), ]
	poptable &amp;lt;- poptable[, -1]
	row.names(poptable) &amp;lt;- NULL
	poptable &amp;lt;- sapply(poptable, function(x) gsub(&amp;quot;.&amp;quot;, &amp;quot;&amp;quot;, x, fixed = TRUE))
	poptable &amp;lt;- gsub(&amp;quot;,&amp;quot;, &amp;quot;.&amp;quot;, poptable, fixed = TRUE)
	poptable &amp;lt;- matrix(as.numeric(poptable), nrow = nrow(poptable))
	poptable
}

# Download Data Shape Data District Boundaries
mapdata &amp;lt;- &amp;quot;http://data.wien.gv.at/daten/geo?service=WFS&amp;amp;request=GetFeature&amp;amp;version=1.1.0&amp;amp;typeName=ogdwien:BEZIRKSGRENZEOGD&amp;amp;srsName=EPSG:4326&amp;amp;outputFormat=shape-zip&amp;quot;

dir.create(&amp;quot;data&amp;quot;, showWarnings = FALSE)
destfile &amp;lt;- &amp;quot;data/BEZIRKSGRENZEOGD.zip&amp;quot;
download.file(mapdata, destfile = destfile)
unzip(destfile, exdir = &amp;quot;data/BEZIRKSGRENZEOGD&amp;quot;)
file.remove(destfile)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## [1] TRUE
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Read District Boundaries
wmap &amp;lt;- readOGR(&amp;quot;data/BEZIRKSGRENZEOGD&amp;quot;, layer=&amp;quot;BEZIRKSGRENZEOGDPolygon&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;## OGR data source with driver: ESRI Shapefile 
## Source: &amp;quot;data/BEZIRKSGRENZEOGD&amp;quot;, layer: &amp;quot;BEZIRKSGRENZEOGDPolygon&amp;quot;
## with 23 features
## It has 15 fields
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Download Population per district
distpop &amp;lt;- download.vienna.bydistrict(&amp;quot;bevoelkerung/tabellen/bevoelkerung-alter-geschl-bez&amp;quot;)
distpopsum &amp;lt;- rowSums(as.matrix(distpop))

# Download Size of Each district
distsize &amp;lt;- download.vienna.bydistrict(&amp;quot;lebensraum/tabellen/nutzungsklassen-bez&amp;quot;, skip.row = 2)
distsizekm2 &amp;lt;- distsize[, 1] / 100

wd &amp;lt;- data.frame(distpopsum / distsizekm2)

centroids &amp;lt;- gCentroid(wmap, byid=TRUE) 
colfunc &amp;lt;- colorRampPalette(c(&amp;quot;lightblue&amp;quot;, &amp;quot;darkred&amp;quot;)) 
colnames(wd) &amp;lt;- &amp;quot;inh&amp;quot; 
wd$district &amp;lt;- seq(1,23) 
anstieg_pop &amp;lt;- wd$district[order(wd$inh)] 
colsort &amp;lt;- colfunc(23)[order(anstieg_pop)] 
layout(matrix(c(1,2), byrow = TRUE),height=c(1.3, 0.7)) 
par(mar=c(0,0,0,0)) 
plot(wmap,col=colsort[wmap$BEZNR]) 
text(as.character(wmap$BEZ_RZ), x = centroids@coords[,1], y = centroids@coords[,2],cex=0.8) 
par(mar=c(3,4,4,2),mgp=c(2,0.7,0)) 
barplot(wd$inh,main=&amp;quot;Population Density Vienna 2014&amp;quot;,yaxt=&amp;quot;n&amp;quot;,col=colsort,xlab=&amp;quot;District&amp;quot;,beside=T, ylab=expression(paste(&amp;quot;1.000 Inhabitants km&amp;quot;^-2)),names.arg=as.roman(wd$district),las=2) 
axis(2,labels=c(&amp;quot;0&amp;quot;,&amp;quot;5&amp;quot;,&amp;quot;10&amp;quot;,&amp;quot;15&amp;quot;,&amp;quot;20&amp;quot;),at=c(0,5000,10000,15000,20000),las=1) 
abline(h=c(5000,10000,15000,20000),lty=2) 
legend(&amp;quot;topright&amp;quot;,pch=c(15,15),col=c(&amp;quot;darkred&amp;quot;,&amp;quot;lightblue&amp;quot;),c(&amp;quot;high&amp;quot;,&amp;quot;low&amp;quot;),bg=&amp;quot;white&amp;quot;) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://www.viennar.org/img/popdensity-1.png&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;p&gt;Authors: Christian Brandstaetter with small additions by Mario Annau&lt;/p&gt;</description>
        </item>
      
    

  </channel>
</rss>
